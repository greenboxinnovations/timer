#include <opencv2/opencv.hpp>
#include <opencv2/aruco.hpp>

#include <thread>
#include <atomic>
#include <mutex>

#include <chrono>

#include <string>
#include <iostream>
#include <fstream>



// database includes 
#include "mysql_connection.h"
#include <cppconn/driver.h>
#include <cppconn/exception.h>
#include <cppconn/resultset.h>
#include <cppconn/statement.h>

#include <boost/shared_ptr.hpp>
#include <boost/scoped_ptr.hpp>

using namespace std;
using namespace cv;

cv::Mat displayFrame1;
cv::Mat displayFrame2;

std::atomic<bool> first1(0);
std::atomic<bool> first2(0);


const string C1WINDOW = "camone";
const string C2WINDOW = "camtwo";

const string CAM1_IP = "rtsp://192.168.0.123:554/Streaming/Channels/2/?transportmode=unicast";
const string CAM2_IP = "rtsp://192.168.0.124:554/Streaming/Channels/2/?transportmode=unicast";

sql::Driver *driver;
const string HOST = "tcp://127.0.0.1:3306";
const string USER = "root";
const string PASSWORD = "toor";
const string DB = "timer";

const int		crossedPointX = 35200;
const double	resetInterval = 10.0;



void camOne() {

	Mat frame;
	VideoCapture video(CAM1_IP);

	Ptr<aruco::Dictionary> dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);
	vector <int> ids;
	vector <std::vector<cv::Point2f>> corners;

	// open and check video	
	if (!video.isOpened()) {
		cout << "Error acquiring video" << endl;
		return;
	}
	while (1) {


		// read frame
		video.read(frame);
		if (!frame.empty()) {

			//detect
			cv::aruco::detectMarkers(frame, dictionary, corners, ids);

			// if at least one marker detected 
			if (ids.size() > 0) {
				// draw
				aruco::drawDetectedMarkers(frame, corners, ids);

			

			}

			frame.copyTo(displayFrame1);
			first1 = true;
		}
		else {
			cout << "erorre" << endl;
		}
	}
}
void camTwo() {

	Mat frame;
	VideoCapture video(CAM2_IP);

	Ptr<aruco::Dictionary> dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);
	vector <int> ids;
	vector <std::vector<cv::Point2f>> corners;

	// open and check video	
	if (!video.isOpened()) {
		cout << "Error acquiring video" << endl;
		return;
	}
	while (1) {
		


		// read frame
		video.read(frame);
		if (!frame.empty()) {

			//detect
			cv::aruco::detectMarkers(frame, dictionary, corners, ids);

			// if at least one marker detected 
			if (ids.size() > 0) {
				// draw
				aruco::drawDetectedMarkers(frame, corners, ids);

			}

			frame.copyTo(displayFrame2);
			first2 = true;
		}
		else {
			cout << "erorre" << endl;
		}
	}
}


int main(int argc, char** argv) {


	namedWindow(C1WINDOW);
	namedWindow(C2WINDOW);

	cv::resizeWindow(C1WINDOW, 640, 480);
	cv::resizeWindow(C2WINDOW, 640, 480);

	cout << "Main start" << endl;
	thread t1(camOne);
	t1.detach();

	thread t2(camTwo);
	t2.detach();


	while (1) {

		if (first1 && first2) {

			imshow(C1WINDOW, displayFrame1);
			imshow(C2WINDOW, displayFrame2);


			char character = waitKey(10);

			switch (character)
			{

			case 27:
				destroyAllWindows();
				return 0;
				break;

			default:
				break;
			}
		}
	}

	return 0;
}

